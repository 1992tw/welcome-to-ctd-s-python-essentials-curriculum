{
  "id": "68796c78a4ac7ef2a17a6170",
  "lessonNumber": 1,
  "title": "Lesson 1 ‚Äî Introduction to Python",
  "status": "pending",
  "assignment": {
    "title": "Assignment for Lesson 1",
    "objective": "No objective specified",
    "expectedCapabilities": [],
    "instructions": [],
    "tasks": [
      {
        "taskNumber": 1,
        "title": "Task 1",
        "description": "# **Lesson 1 Assignment: Intro to Python**\n### Python Operators, Control Flow, and Calculator Implementation\n\n## **Objective and Overview**  \nIn this assignment, you will practice key Python concepts including:    \n‚úÖ Declaring functions  \n‚úÖ Formatted Strings  \n‚úÖ Type Conversion  \n‚úÖ Error Handling  \n‚úÖ For Loops with Ranges  \n‚úÖ Use of *args and **kwargs in Function Declarations  \n‚úÖ String Manipulation   \n\n### üéôÔ∏è Podcast: Lesson 1\n\nWe‚Äôre excited to introduce a new optional resource to support your learning‚Äî**short, mentor-style podcast episodes that break down key assignments and concepts in a friendly, approachable way.**\n\nIf you ever feel stuck, want a quick refresher before diving in, or just prefer listening over reading, these episodes are here to help! They‚Äôll cover **how to approach your assignment, common tricky spots, and why these skills matter‚Äîall in a quick, easy-to-digest format**.\n\n**These podcasts are generated by [NotebookLM](https://notebooklm.google/)** ‚Äî a new tool we're still exploring. Let us know if these are helpful, and happy coding!\n\n**[Listen to the assignment overview podcast here](https://youtu.be/azM0-ybstt4).**\n\nSince the podcast was created, the assignment itself has been updated to make it more comprehensive, so the podcast doesn't match up. You could check out the format/style of the podcast to see if it is the sort of thing that would help you.\n\n## **Instructions**\n\n### **Setup**\n\nYour homework for this and some future assignments will use a special python homework repository, so that it can be submitted using git.  That repository is [here.](https://github.com/Code-the-Dream-School/python_homework)  Click on the link, and carefully **follow the instructions in the README**.  You will then have your own copy of the repository, connected to your GitHub account.  You create the program files for the homework in the root of that repository.  For each assignment, you create a separate git branch (e.g. `git checkout -b lesson1`).  When you have completed your assignment, you add and commit your changes in that branch, push it to your GitHub, and create a pull request for that branch from your lesson branch (as the compare) to main branch (as the base).  You provide a link to that pull request when you submit your homework.  Your instructor will review it, approving or requesting changes.  Once your instructor has approved the pull request, you can merge it so that your lesson work gets updated to the main branch.  The reason for this workflow is to mimic what's done in the industry of making features and fixes on separate branches before testing/checking it.  Once the code is tested and checked by a supervisor/review process, the code gets merged to a production branch (in this case your main branch) so the users will see updates.\n\n### **Step 1: Complete the Coding Tasks**  \n\nAt the outset, you create python `.py` files.  In some future lessons, you will create Jupyter notebooks. Homework for this assignment is created within your `python_homework` folder.  Be sure to create an `assignment1` git branch.  Then, write Python code to complete the following tasks.  As you do, put in **comment lines to mark your code for Task 1, Task 2, and so on.** That will help your reviewer.\n\nThis assignment uses a Python tool for automated testing, called PyTest.  You installed it when you set up the python_homework folder.  You'll code a series of functions.  PyTest will validate whether your code is correct.  To run the test:  \n\n- Change to the python_homework/assignment1 folder.\n- Type `code .` to bring up VSCode for this folder. \n- Start a git bash terminal session within VSCode and enter the command (you can make git bash the default using ctl-shift-p and setting the `Terminal: Select Default Profile`)\n\n```bash\npytest -v -x assignment1-test.py # can use just -x, adding -v lists the passing tests\n```\n\nPyTest attempts to perform the tests, and as you haven't written the code yet, it quickly ends with an error -- in this case, because you haven't created the hello function.  You follow this pattern: \n\n- Add your code to the `./assignment1/assignment1.py file` which is provided (but it's empty.)\n- Write each function according to the instructions below.\n- Put a print() statement in the mainline of your code (not inside the function), and call the function from within the print() statement to see if it works.  You can run the file by typing `python assignment1.py`.\n- Then run the test using the command above.  \n- If it reports errors, change your code to fix them.  \n\nOnce the first test passes, you'll get an error for the second test, so you go on to write the second function, and so on until all 10 tests complete successfully.  You should have a look at assignment1-test.py to see how it works and what it tests for.  Keep going until all tests pass.\n\nThere are a number of new Python capabilities introduced during this assignment, beyond what is in the lesson, but they are explained below, so that you can learn and practice at the same time.\n\n**Help is Available**\n\nWe have covered quite a bit.  If you get stuck, 1:1 mentors are available to answer your questions.  Appointments are available in the [1:1 Mentor Table](https://airtable.com/appoSRJMlXH9KvE6w/shrQinGb1phZYwdiL)\n\n---\n\n### **Task 1: Hello**\n\nWrite a hello function that takes no arguments and returns `Hello!`.  Now, what matters here is what the function *returns*.  You can print() whatever you want for debugging purposes, but the tests ignore that, and only check the return value.\n\n### **Task 2: Greet with a Formatted String**\n\nWrite a greet function.  It takes one argument, a name, and returns `Hello, Name!`.  Use a formatted string.  Note that you have to return exactly the right string or the test fails -- but PyTest tells you what didn't match.\n\n### **Task 3: Calculator**  \n- Write a calc function.  It takes three arguments.  The default value for the third argument is \"multiply\".  The first two arguments are values that are to be combined using the operation requested by the third argument, a string that is one of the following add, subtract, multiply, divide, modulo, int_divide (for integer division) and power.  The function returns the result.\n- Error handling: When the function is called, it could ask you to divide by 0. That will throw an exception: Which one?  You can find out by triggering the exception in your program or in the Python Interactive Shell.  Wrap the code within the calc function in a try block, and put in an except statement for this exception.  If the exception occurs, return the string \"You can't divide by 0!\".  \n- More error handling: When the function is called, the parameters that are passed might not work for the operation.  For example, you can't multiply two strings.  Find out which exception occurs, catch it, and return the string \"You can't multiply those values!\".\n- Here's a tip.  You have to do different things for add, multiply, divide and so on.  So you can do a conditional cascade, if/elif/elif/else.  That's perfectly valid.  But you might want to use the match-case Python statement instead.  Look it up!  It just improves code appearance.\n\nAgain, as you complete each function, you run the test to see whether everything is correct.\n\n---\n\n### **Task 4: Data Type Conversion** \n- Create a function called data_type_conversion.  It takes two parameters, the value and the name of the data type requested, one of float, str, or int.  Return the converted value.\n- Error handling: The function might be called with a bad parameter.  For example, the caller might try to convert the string \"nonsense\" to a float.  Catch the error that occurs in this case.  If this error occurs, return the string `You can't convert {value} into a {type}.`, except you use the value and data type that are passed as parameters -- so again you use a formatted string.\n\n---\n\n### **Task 5: Grading System, Using `*args`** \n- Create a grade function.  It should collect an arbitrary number of parameters, compute the average, and return the grade.\nbased on the following scale:  \n   - A: 90 and above  \n   - B: 80-89  \n   - C: 70-79  \n   - D: 60-69  \n   - F: Below 60  \n- When you use `*args` you get access to a variable named `args` in your function, which is a tuple, an ordered collection of values like a list.  You'll learn more about tuples and lists in the next lesson.  There are some helpful functions you can use at this point: `sum(args)`, `len(args)`, and so on.  One of the curiosities of Python is that these are not methods of any class.  They are just standalone functions.\n- Handle the error that occurs if the parameters are nonsense.  Return the string \"Invalid data was provided.\" in this case.  (Typically, you don't handle every possible exception in your error handling, except if the values in the parameters comes from the end user.)\n\n---\n\n### **Task 6: Use a For Loop with a Range**  \n- Create a function called repeat.  It takes two parameters, a string and a count, and returns a new string that is the old one repeated count times.\n- You can get the test to pass by just returning `string * count`.  That would produce the correct return value.  But, for this task, do it using a for loop and a range.\n\n---\n\n### **Task 7: Student Scores, Using `**kwargs`**  \n\n- Create a function called student_scores.  It takes one positional parameter and an arbitrary number of keyword parameters.  The positional parameter is either \"best\" or \"mean\".  If it is \"best\", the name of the student with the higest score is returned.  If it is \"mean\", the average score is returned.\n- As you are using `**kwargs`, your function can access a variable named `kwargs`, which is a dict.  The next lesson explains about dicts.  What you need to know now is the following:\n   - A dict is a collection of key value pairs.\n   - You can iterate through the dict as follows:\n   ```python\n   for key, value in kwargs.items():\n   ```\n   - You can also get `kwargs.keys()` and `kwargs.values()`.\n- The arbitrary list of keyword arguments uses the names of students as the keywords and their test score as the value for each.\n\n---\n\n### **Task 8: Titleize, with String and List Operations**\n\n- Create a function called titleize.  It accepts one parameter, a string.  The function returns a new string, where the parameter string is capitalized as if it were a book title.\n- The rules for title capitalization are: (1) The first word is always capitalized. (2) The last word is always capitalized. (3) All the other words are capitalized, except little words.  For the purposes of this task, the little words are \"a\", \"on\", \"an\", \"the\", \"of\", \"and\", \"is\", and \"in\".\n- The following string methods may be helpful: split(), join(), and capitalize().  Look 'em up.\n- The split() method returns a list. You might store this in the `words` variable.  `words[-1]` gives the last element in the list.\n- The `in` comparison operator: You have seen `in` used in loops.  But it can also be used for comparisons, for example to check to see if a substring occurs in a string, or a value occurs in a list.\n- A new trick: As you loop through the words in the `words` list, it is helpful to have the index of the word for each iteration.  You can access that index using the enumerate() function:\n```python\nfor i, word in enumerate(words):\n```\n\n---\n\n### **Task 9: Hangman, with more String Operations**\n\n- Create a function hangman.  It takes two parameters, both strings, the secret and the guess.\n- The secret is some word that the caller doesn't know.  So the caller guesses various letters, which are the ones in the guess string.\n- A string is returned.  Each letter in the returned string corresponds to a letter in the secret, except any letters that are not in the guess string are replaced with an underscore.  The others are returned in place.  Not everyone has played this kid's game, but it's common in the US.\n- Example: Suppose the secret is \"alphabet\" and the guess is \"ab\".  The returned string would be \"a___ab__\".\n- Note that Python strings are immutable.  That means that the following code would give an error:\n```python\nsecret = \"alphabet\"\nsecret[1] = \"_\"\n```\n- On the other hand, you can concatenate strings with the `+` operator.\n\n---\n\n### **Task 10: Pig Latin, Another String Manipulation Exercise**\n\n- Pig Latin is a kid's trick language.  Each word is modified according to the following rules.  (1) If the string starts with a vowel (aeiou), \"ay\" is tacked onto the end. (2) If the string starts with one or several consonants, they are moved to the end and \"ay\" is tacked on after them. (3) \"qu\" is a special case, as both of them get moved to the end of the word, as if they were one consonant letter.\n- Create a function called pig_latin.  It takes an English string or sentence and converts it to Pig Latin, returning the result.  We will assume that there is no punctuation and that everything is lower case.\n\n### **Step 2: Submit Your Assignment on GitHub**  \n\n**Follow these steps to submit your work:**  \n\n#### **1Ô∏è‚É£ Add, Commit, and Push Your Changes**  \n- Within your python_homework folder, do a git add and a git commit for the files you have created, so that they are added to the `assignment1` branch.\n- Push that branch to GitHub. \n\n#### **2Ô∏è‚É£ Create a Pull Request**  \n- Log on to your GitHub account.\n- Open your `python_homework` repository.\n- Select your `assignment1` branch.  It should be one or several commits ahead of your main branch.\n- Create a pull request.\n\n#### **3Ô∏è‚É£ Submit Your GitHub Link**  \n- Your browser now has the link to your pull request.  Copy that link. \n- Paste the URL into the **assignment submission form**.  \n\n## **üéâ Well Done!**  \nGreat job completing Lesson 1! You're building a strong foundation in Python. üöÄ  \n",
        "codeExample": "",
        "_id": "68796c78a4ac7ef2a17a6172"
      }
    ],
    "submissionInstructions": "Please submit on time",
    "checklist": [],
    "checkForUnderstanding": []
  },
  "subsections": [
    {
      "subsectionOrder": 1,
      "title": "Lesson 1",
      "content": "# Lesson 1 ‚Äî Introduction to Python\n\nWelcome to **Python Essentials** with Code the Dream!\n\n## üëÄ How to Follow This Content\n\n* Start by reading the lesson's **learning objective** in the `Lesson Overview` section. Each weekly assignment will measure your skill related to the learning objective.\n* Lessons are split into **subsections**, labeled like this: `1.1`, `1.2`, etc.\n* Several subsections also have a short **supplemental video** that will help you understand the content in that subsection.\n* At the end of each subsection, you'll find a multiple-choice **\"Check for Understanding\"** question. Complete the question and review the material if your answer is not correct!\n* After reading through the lesson content and correctly answering the \"Check for Understanding\" questions, complete the **Weekly Assignment**.\n\nIf you have questions at any point, ask a question in the `discussion` Slack channel or reach out to your mentor!\n\n## Lesson Overview\n\n**Learning objective:** Students will learn the basics of Python programming, including variables, data types, operators, control flow statements, and functions. They will also practice debugging their code.\n\nTopics:\n\n- **Setting Up Your Python Environment**:  \n  Installing Python, pip, and your IDE. We recommend the VS Code IDE. It's ok to use another IDE if you are comfortable with it. Verifying installations and creating `.py` files.\n- **Python Basics**:  \n  Variables, data types (integers, floats, strings, booleans), data conversion (explicit and implicit), and operators (arithmetic, comparison, logical).\n- **Block Structure and Indentation**:  \n  Understanding Python‚Äôs indentation-based syntax for defining blocks like functions, loops, and conditionals.\n- **Control Flow**:  \n  Conditional statements (`if`, `elif`, `else`), loops (`for`, `while`), and controlling loops with `break` and `continue`.\n- **Functions**:  \n  Defining and calling functions, parameters, return values, and handling dynamic arguments with `*args` and `**kwargs`.\n- **Debugging**:  \n  - **Error Handling**: Introduction to `try`, `except` for handling runtime errors.  \n  - **Basic Debugging**: Using print statements and the `logging` module to debug code effectively.\n\n## 1.1 Setting up your environment \n\n\n### Install Python\n\nYou can download Python from the official website: [python.org](https://www.python.org/downloads/).\n\nFollow the installation instructions for your operating system:\n\n1. **Install Python:**\n   Follow the installation instructions for your operating system.  For this class, we require Python 3.  The previous version (Python 2) is significantly different and is deprecated.\n\n   - **For Windows**\n       - If you are using Windows, it is common to use the Windows Subsystem for Linux for development. WSL is not recommended for this class.** Later lessons use `matplotlib for graphs`. It is difficult to do the configuration needed to get graphs to show in the WSL environment. Windows users should install in Windows native.\n       - Follow the instructions on the website. Make sure to check the option to **Add Python to PATH** during installation.\n       - Windows users should have Git for Windows installed, and should use Git Bash for all subsequent steps.  If python hangs when you run it in a git bash window, add the following line to ~/.bash_profile: `alias python='winpty python.exe'`\n\n   - **For macOS**:\n      - macOS typically comes with Python pre-installed. To ensure you are using Python 3, download the latest version of Python from [python.org](https://www.python.org/downloads/).\n      - Follow the installation instructions. You can also use **Homebrew** to install Python by running the following command in the terminal:\n          ```bash\n          brew install python\n          ```\n    - **For Linux**:\n       - Most Linux distributions come with Python pre-installed, but you need to have Python 3 for the class. To install or upgrade Python 3, you can use the package manager:\n       - For **Debian/Ubuntu** systems:\n          ```bash\n          sudo apt update\n          sudo apt install python3\n          ```\n        - For **Fedora**:\n          ```bash\n          sudo dnf install python3\n          ```\n        - For **Arch Linux**:\n          ```bash\n          sudo pacman -S python\n          ```\n\n\n2. **Verify Python Installation**:\n    After installation, you can verify that Python is installed correctly, and that you have Python 3, by opening a terminal or command prompt and running:\n   \n    ```bash\n    python --version\n    ```\n    Some systems install Python as python3 to differentiate it from a previous installation of Python 2, which is deprecated.:\n    ```bash\n    python3 --version\n    ```\n    This should display the installed version of Python. For example, you might see:\n    ```\n    Python 3.9.7\n    ```\n\n    At this point, you can try the Python Interactive Shell.  You type `python` or `python3` without arguments.  This brings up a command line into which you can type code, which is then executed as each statement is completed.  The code is not preserved, of course, but this is a good way to try many of the ideas below.  Ctrl-D exits the shell.\n\n3. **Install pip**\n\n    **Pip** is Python‚Äôs package installer, and it is included automatically with Python versions 3.4 and above. It allows you to easily install and manage Python libraries and packages from the Python Package Index (PyPI).\n\n    #### Verify if pip is installed:\n    To check if **pip** is installed, open a terminal or command prompt and type:\n\n    ```bash\n    pip --version\n    ```\n\n    Systems which install Python as `python3` will install pip as `pip3` instead:\n\n    ```bash\n    pip3 --version\n    ```\n\n    This should display the installed version of pip. If pip is not installed or you encounter an error, you may need to reinstall Python and ensure that the box for **Add Python to PATH** is checked.\n\n    #### Upgrading pip:\n    If you already have pip installed but want to make sure it‚Äôs up to date, run the following command:\n\n    ```bash\n    python -m pip install --upgrade pip\n    ```\n\n    Or, for Python 3:\n\n    ```bash\n    python3 -m pip install --upgrade pip\n    ```\n\n4. **Create a Working Folder**\n    - Your assignments will use a git repository, and the instructions for setting up that repository are included in the first lesson.  You should also have a separate folder to try the code samples from the lessons.  This working folder should be outside of the cloned repository on your computer.  For example, you could create a folder called `python_class`.  Inside that folder, create a folder called `working` to use for lesson code samples.  When you do the first assignment, you will also clone a repository called `python_homework` inside the `python_class` folder.  Your lessons and assignments will require some packages to be added to Python using pip.  These should be installed into a virtual environment -- a collection of packages specifically for your project.  (The JavaScript and Rails package managers set up a virtual environment automatically, but it requires several additional steps for Python.) \n    \n    Create a folder, cd to that folder, and then do the following:\n    - Install the virtualenv package: `pip install virtualenv` (or perhaps `pip3 install virtualenv`).\n    - Then, create the virtual environment.\n        - Windows users enter the following commands:\n        ```bash\n        python -m venv .venv\n        source .venv/Scripts/activate\n        code .\n        ```\n        - Mac and Linux users enter the following commands:\n            ```bash\n            python3 -m venv .venv\n            source .venv/bin/activate\n            code .\n            ```\n    Once your virtual environment is activated, you see `.venv` as part of your terminal prompt.  Be sure that is present for all subsequent work.  When you create a new terminal session, you have to activate the virtual environment again.  When the virtual environment is active, you can always use the commands `python` and `pip`, that is, you don't need `python3` or `pip3`.\n\n5. **Set Up VSCode for Python**\n    - Some developers may choose an alternate editor, such as PyCharm, but VSCode works well, and the instructions below describe what you need to do.\n    - Be sure to install the Python extension for VSCode.\n    - Windows developers: You should add the following lines to your `~/.bashrc` file (creating the file if it does not exist):\n    ```bash\n    if [ -f ./.venv/Scripts/activate ]; then\n        source ./.venv/Scripts/activate\n    fi\n    ```\n    - In the VSCode command palette (Ctrl-Shift-P) go to `Python: Select Interpreter` and choose the one that has `.venv` in it.\n    - When you open a VSCode terminal, you should see a `(.venv)` as part of the prompt.  This is how you know that the virtual environment is active.  You want it to be active before installing packages such as pandas or numpy.\n\n        \n## 1.2 Python Basics\n\n### If you are a JavaScript Developer\n\nYou have a head start.  All the basic structures of programming (loops, conditional statements, variables, and so on) are in Python.  But, Python syntax is different.  You'll have to adjust to the differences.  You may want to read [this summary](https://www.freecodecamp.org/news/learn-python-for-javascript-developers-handbook/). (This is optional.)\n\n### A Cheat Sheet\n\nHere is [a one page summary of the Python syntax](https://quickref.me/python.html).  You may want to have it on hand.\n\n### Variables in Python\n\nA **variable** is like a labeled box where you store data. In Python, variables don‚Äôt need explicit declaration before assignment, and the type of data they hold can change dynamically.\n\nIn the example below,\n\n* `name` is assigned a **string** `\"Jazmine\"`\n* `age` is assigned an **integer** `28`\n* `height` is assigned a **float** `5.8`\n\n```python\nname = \"Jazmine\"   # A variable storing a string\nage = 28           # A variable storing an integer\nheight = 5.8       # A variable storing a float (decimal)\n```\n\nHere are some general rules for Python variable naming.\n- Lowercase: Use lowercase letters for variable names.\n- Underscores: Separate words in variable names with underscores (_).\n- Descriptive: Choose meaningful names that clearly indicate the variable's purpose.\n- Avoid single-character names: Except for simple loop counters (e.g., i, j, k).\n\n### Data Types in Python\n\n**Data types** specify the kind of data is stored in a variable. Common data types include:\n\n* Integer (`int`): Whole numbers (e.g., 42, -3)\n* Float (`float`): Decimal numbers (e.g., 3.14, -0.5)\n* String (`str`): Text (e.g., \"hello\", \"world\")\n* Boolean (`bool`): Represents True or False values\n\n```python\nis_student = True       # Boolean\nbalance = 1000.75       # Float\nfirst_name = \"Charlie\"  # String\nnumber_of_days = 7      # Integer\n```\n\nYou can check the type of a variable using the `type()` function:\n\n```python\nprint(type(balance))  # Output: <class 'float'>\n```\n\n### Data Conversion\n\nData conversion, or **type casting**, is the process of converting one data type to another. Python provides several built-in functions to make this easy. Common conversion functions include `int()`, `float()`, `str()`, and `bool()`. Notice that these conversion functions line up with the data types demonstrated in the previous section.\n\n```python\n# Convert a string to an integer\nnum_str = \"42\"\nnum_int = int(num_str)  # 42 (integer)\n\n# Convert an integer to a float\nnum_float = float(num_int)  # 42.0 (float)\n\n# Convert a number to a string\nnum_str_again = str(num_int)  # \"42\" (string)\n\n# Convert to a Boolean\nis_empty = not bool(\"\")  # True \nis_non_zero = bool(5)  # True (non-zero numbers are considered True)\n```\n\n#### Why Convert Data Types?\n\nData conversion is helpful when you need to perform operations between incompatible types or display values in specific formats. For instance, combining a number with text requires converting the number to a string.\n\n```python\n# Without type conversion\nage = 30\nmessage = \"I am \" + age + \" years old.\"  # \"TypeError: can only concatenate str (not \"int\") to str\"\n```\n\n```python\n# With type conversion\nage = 30\nmessage = \"I am \" + str(age) + \" years old.\"  # \"I am 30 years old.\"\n```\n\n#### Implicit vs. Explicit Conversion\n\nPython sometimes performs **implicit conversion** (automatic type conversion), such as when adding an integer and a float, the result is automatically a float. However, for more control, it‚Äôs usually better to use **explicit conversion** with the functions above.\n\n```python\n# Implicit conversion\nresult = 3 + 2.5  # 5.5 (float, because Python converts the integer to float)\n\n# Explicit conversion\nresult = int(2.8) + 3  # 5 (integer, because we explicitly converted the float to int)\n```\n\n### üé¨ Video 1.2: Data Types and Conversion\n\nLearn how to work with data types in Python in our first video, which covers essential type conversions with `int()`, `float()`, `str()`, and `bool()`, practical examples of when to use them, and tips to avoid common pitfalls.  In general, you are not required to view the videos for this class, as the lesson text covers the same information, but the videos may help you learn and remember.\n\n**[Watch the video here.](https://youtu.be/v5NBGGHKJtI)**\n\n## 1.3 Operators in Python\n\n**Operators** are special symbols that perform operations on variables and values. Some of the most commonly used operators are:\n\n1. **Arithmetic Operators**: For mathematical calculations\n   * `+` (addition): `3 + 2` ‚Üí `5`\n   * `-` (subtraction): `5 - 3` ‚Üí `2`\n   * `*` (multiplication): `4 * 2` ‚Üí `8`\n   * `/` (division): `9 / 3` ‚Üí `3.0`\n   * `//` (integer division): `9 // 3` ‚Üí `3`\n   * `%` (modulus, remainder): `7 % 3` ‚Üí `1`\n   * `**` (exponentiation): `2 ** 3` ‚Üí 8\n\n2. **Comparison Operators**: Compare two values and return a Boolean (`True` or `False`)\n   * `==` (equal to): `5 == 5` ‚Üí `True`\n   * `!=` (not equal to): `5 != 4` ‚Üí `True`\n   * `<` (less than): `3 < 4` ‚Üí `True`\n   * `>` (greater than): `10 > 5` ‚Üí `True`\n   * `<=` (less than or equal to): `5 <= 5` ‚Üí `True`\n   * `>=` (greater than or equal to): `7 >= 3` ‚Üí `True`\n\n3. **Logical Operators**: Used to combine conditional statements\n   * `and`: `True and False` ‚Üí `False`\n   * `or`: `True or False` ‚Üí `True`\n   * `not`: `not True` ‚Üí `False`\n\nOperators Examples:\n\n```python\n# Arithmetic\nresult = 10 + 5  # 15\nremainder = 9 % 4  # 1\n\n# Comparison\nprint(5 > 3)  # True\n\n# Logical\nprint(True and False)  # False\n```\n### Check for Understanding\n\n**Question:** What type of data is stored in the variable `age` in the following code?\n\n```python\nage = 28\n```\n\n* A) String\n* B) Integer\n* C) Float\n* D) Boolean\n  \n<details>\n\n<summary>View answer</summary>\n\n**Answer**: B) Integer\n\n</details>\n\n**Question:** Which of the following data types would you use to store the value `\"Hello, World!\"`?\n\n* A) Integer\n* B) Float\n* C) String\n* D) Boolean\n\n<details>\n\n<summary>View answer</summary>\n\n**Answer**: C) String\n\n</details>\n\n**Question**: What will be the output of the following code?\n\n```python\nnum_str = \"42\"\nnum_int = int(num_str)\nprint(num_int)\n```\n\n* A) `\"42\"`\n* B) `42`\n* C) `<class 'str'>`\n* D) An error message\n\n<details>\n\n<summary>View answer</summary>\n\n**Answer**: B) `42`\n\n</details>\n\n**Question**: What will the following code output?\n\n``python\nprint(10 % 3)\n``\n\n* A) `3`\n* B) `1`\n* C) `10`\n* D) `0`\n\n<details>\n\n<summary>View answer</summary>\n\n**Answer:** B) `1`\n\n</details>\n\n## 1.4 Block Structure and Indentations \n\nIn Python, indentation plays a crucial role in the syntax of the language. Unlike many other programming languages, which use braces {} or other markers to denote code blocks, Python uses indentation to group statements and define the scope of loops, functions, classes, and conditional statements.\n\n**Why Indentation Matters in Python**\n\n* **Defining Code Blocks:** Indentation tells Python where a block of code begins and ends.\n* **Enforcing Readability:** The clean and readable structure makes Python code easier to follow.\n\n**Key Concepts:**\n\n* **Indentation in Control Structures:** \n    * All code under control structures (such as `if`, `else`, `for`, `while`, and function definitions) must be indented.  You always put a colon `:` before starting an indented block on the next line.\n\n* **Consistent Indentation:**\n    * Consistency is key. Python does not allow mixing tabs and spaces. Use either spaces or tabs but never both. \n    * The Python community‚Äôs standard is to use 4 spaces per indentation level.\n\n**Block Structure Example:**\n\n```python\ndef check_number(num):\n    if num > 0:\n        print(\"Positive number\")\n    elif num < 0:\n        print(\"Negative number\")\n    else:\n        print(\"Zero\")\n```\nIn the above example:\n\nThe function check_number defines the first level of indentation.\nThe if, elif, and else blocks define additional indentation levels for the code that falls under each condition.\nIndentation Error Example:\n\n\n```python\ndef check_number(num):if num > 0:  # This will raise an error because it's not indented properly\n    print(\"Positive number\") \n```\nIn the above case, Python will raise an error stating: IndentationError: expected an indented block.\n\nUsing Indentation with Loops:\n\n```python\nfor i in range(3):\n    print(\"Loop iteration:\", i)  # This line is inside the for loop\n```\nAny line that is indented under the for statement is part of the loop.\n\n\nIn many programming languages the format and structure makes code more easily readable.  Structure is even more critical in Python.  Read [this article from Geeks for Geeks](https://www.geeksforgeeks.org/indentation-in-python/) to gain an understanding of the importance of indentation, format, and structure when writing code blocks in Python. \n\n## 1.5 Control Flow\n\nControl flow structures allow us to direct the execution of code based on conditions or repeat code until a condition is met. The two main control flow structures in Python are **conditional statements** and **loops**.\n\n### Conditional Statements\n\nConditional statements enable code to execute only when specific conditions are met. Python uses `if`, `elif`, and `else` statements to handle different conditions.\n\n* `if`: Checks the initial condition. If `True`, it runs the code block.\n* `else`: Runs if none of the previous conditions were `True`.\n* `elif`: Stands for 'else if'; checks additional conditions if the previous ones were `False`.\n\n```python\nage = 20\n\nif age >= 18:\n    print(\"You're an adult!\")\nelif age >= 13:\n    print(\"You're a teenager.\")\nelse:\n    print(\"You're a child.\")\n```\n\n#### Nested Conditionals\n\nYou can also nest conditionals inside each other for more complex decision-making.\n\n```python\nscore = 85\n\nif score >= 90:\n    print(\"A\")\nelse:\n    if score >= 80:\n        print(\"B\")\n    else:\n        print(\"C\")\n```\n\n### Loops\n\n**Loops** allow us to repeat code multiple times, either for a specific range or while a condition is `True`\n\n#### `For` Loop\n\nThe `for` loop is commonly used to iterate over a sequence (like a list or range of numbers).\n\n```python\n# Looping through a list\nfruits = [\"apple\", \"banana\", \"cherry\"]\n\nfor fruit in fruits:\n    print(fruit)\n\n# Using range to loop a specific number of times\n# range(stop) where stop is greater than the last number generated\n# range(start, stop) starts with a number other 0\n# range(start, stop, step) uses the specified step size instead of 1 \nfor i in range(3):\n    print(\"Loop iteration:\", i)\n```\n\n#### `While` Loop\n\nA `while` loop runs as long as a condition remains `True`. Be careful to ensure the condition will eventually be `False` to avoid infinite loops.\n\n```python\ncount = 0\n\nwhile count < 3:\n    print(\"Count is:\", count)\n    count += 1\n```\n\n#### Breaking Out of Loops\n\nThe `break` statement can be used to exit a loop early.\n\n```python\nfor num in range(10):\n    if num == 5:\n        break\n    print(num)\n# Output: 0, 1, 2, 3, 4\n```\n\n#### Skipping Iterations\n\nThe `continue` statement allows you to skip the rest of the code in the current iteration and move to the next iteration.\n\n```python\nfor num in range(5):\n    if num == 2:\n        continue\n    print(num)\n# Output: 0, 1, 3, 4\n```\n\n### Check for Understanding\n\n**Question:** What will the following code output if `age = 16`?\n\n```python\nif age >= 18:\n    print(\"You're an adult!\")\nelif age >= 13:\n    print(\"You're a teenager.\")\nelse:\n    print(\"You're a child.\")\n```\n\n* A) \"You're an adult!\"\n* B) \"You're a teenager.\"\n* C) \"You're a child.\"\n* D) No output\n\n<details>\n\n<summary>View answer</summary>\n\n**Answer**: B) \"You're a teenager.\"\n\n</details>\n\n**Question**: What will the following code output?\n\n```python\nfor i in range(3):\n    print(i)\n```\n\n* A) `1 2 3`\n* B) `0 1 2`\n* C) `0 1 2 3`\n* D) `3`\n\n<details>\n\n<summary>View answer</summary>\n\n**Answer**: B) `0 1 2`\n\n</details>\n\n### Long Lines \n\nIf you need to split a line for readability, you put a backslash `\\` at the end of the line.  You don't need to indent the line after the backslash.  Python concatenates the two lines (or more, if the next line also has a backslash.)  If you do indent, Python includes the indentations.  Long strings can also be created another way.  You start and end them with three quotes. `\"\"\"`  Python concatenates them, including the line feeds, spaces, and indentations.\"\n\n## üé¨ Video 1.5: Loops and Conditionals\n\nOur next video is a breakdown of  common situations in which someone might use loops, how to control loop behavior with `break` and `continue`, and loop nesting.\n\n**[Watch the video here](https://youtu.be/VUwzi5TVMzM).**\n\n## 1.6 Functions\n\n**Functions** are reusable blocks of code that perform specific tasks. They help keep your code organized, modular, and easy to understand.\n\n### Defining and Calling Functions\n\nA function is defined using the `def` keyword, followed by a function name, parentheses `()`, and a colon. The code inside the function is indented.\n\n```python\ndef greet():\n    print(\"Hello, world!\")\n```\n\nTo call a function, simply use its name followed by parentheses.\n\n```python\ngreet()  # Output: Hello, world!\n```\n\n### Parameters and Arguments\n\nFunctions can take **parameters** (variables defined within the parentheses in the function definition) to make them more versatile. When calling the function, you pass **arguments** (the actual values).\n\n```python\ndef greet(name):\n    print(\"Hello, \" + name + \"!\")\n    \ngreet(\"Jazmine\")  # Output: Hello, Jazmine!\n```\n\nYou can also define multiple parameters.\n\n```python\ndef add(a, b):\n    print(a + b)\n\nadd(3, 5)  # Output: 8\n```\n\n### Return Values\n\nA function can return a value to the caller using the `return` keyword. This makes the function's output available for use outside the function.\n\n```python\ndef square(number):\n    return number * number\n\nresult = square(4)  # result is 16\n```\n\nIf a function doesn‚Äôt explicitly return a value, it implicitly returns `None`\n\n### Default Parameters\n\nYou can set **default values** for parameters, making them optional when the function is called.\n\n```python\ndef greet(name=\"stranger\"):\n    print(\"Hello, \" + name + \"!\")\n\ngreet()            # Output: Hello, stranger!\ngreet(\"Luis\")   # Output: Hello, Luis!\n```\n\n### Using *args and **kwargs\n\nFunctions can be made more flexible by allowing them to handle an arbitrary number of arguments.\n\n**What are *args?**\n\n*args allows a function to accept any number of positional arguments, which are collected into a tuple.  A tuple is an immutable, ordered data structure.  Tuples are covered in detail in lesson2.\n\n**Example:**\n\n```python\ndef add_numbers(*args):\n    return sum(args)\n\nprint(add_numbers(1, 2, 3, 4))  # Output: 10\n```\n\n**Key Points:**\n\n* Use *args when the exact number of arguments isn't known beforehand.\n* The collected arguments are treated as a tuple.\n\n**What are **kwargs?**\n\n**kwargs allows a function to accept any number of keyword arguments, which are collected into a dictionary.  A dictionary is an associative array similar to a Hash in Ruby or an object in JavaScript.  Dictionaries are covered in detail in lesson 2.\n\n**Example:**\n\n```python\ndef print_info(**kwargs):\n    for key, value in kwargs.items():\n        print(f\"{key}: {value}\")\n\nprint_info(name=\"Janet\", role=\"Developer\", age=25)\n```\n\n**Key Points:**\n\n* Use **kwargs when you expect dynamic named parameters.\n* The collected arguments are treated as a dictionary.\n\n**Combining *args and **kwargs**\n\nYou can use both together to handle a mix of positional and keyword arguments.\n\n**Example:**\n\n```python\ndef mixed_function(*args, **kwargs):\n    print(\"Positional arguments:\", args)\n    print(\"Keyword arguments:\", kwargs)\n\nmixed_function(1, 2, 3, name=\"Janet\", role=\"Developer\")\n```\n\n**Output:**\n\n```\nPositional arguments: (1, 2, 3)\nKeyword arguments: {'name': 'Janet', 'role': 'Developer'}\n```\n\n**Another Example**\n\n```python\ndef mixed_function_2(*args, a_value=\"default\"):\n    print(f\"args are {args} and a_value is {a_value}\")\n\nmixed_function_2(1, 2, 3, a_value=\"override\")\n```\n\nIn this case, a_value is a keyword argument, because it comes after the `*args`.  In the example (this is not always so) a_value has a default value.  The keyword is given explicitly here, instead of using `**kwargs`.  When the keyword is given explicitly, the value is not delivered in a dictionary.  It is accessed using the keyword as a variable name. \n\nFunctions are always declared with named positional arguments (if any) first, then the `*args` (if this is used), then the explicitly named keyword arguments (if any), and then in last place `**kwargs` (if this is used).  When a function with keyword arguments is called, the order in which the keyword arguments is given doesn't matter (except they should come after the positional arguments.) \n\n### Variable Scope\n\nIf a variable is declared inside a function, it is local to that function.  For example, this code gives an error:\n\n```python\ndef set_name():\n    name=\"James\"\n\nset_name()\nprint(name)\n```\nThe name variable is declared inside the function, and is not defined outside.  Also note the results below:\n```python\nname = \"Hima\"\n\ndef set_name():\n    name=\"James\"\n\nset_name()\nprint(name) # Prints \"Hima\"\n\ndef set_name_2(name):\n    name = \"Nguyen\"\n\nset_name_2()\nprint(name) # Prints \"Hima\"\n```\n\nPython acts as if the `name=` statement inside each function is the declaration for a new local variable called `name`.  The first `name=` statement in the script above is for a global variable.\n\nA function *can* access global variables.  For example, suppose we add this code to the script above.\n\n```python\ndef print_global_name():\n    print(name) # Prints \"Hima\"\n```\n\nAnd, a function *can* change values stored in global variables (although this is typically bad practice).  As in this code:\n```python\nthis_list=[0,1] # a global\ndef change_list():\n    this_list[1]=17 # Does change this_list[1] for the this_list global\n```\nIndentation blocks in Python have no effect on variable scope.\n\n### üé¨ Video 1.6: Functions\n\nOur supplemental video for this section overviews functions, arguments, and parameters; along with two sets of example code.\n\n**[Watch the video here](https://youtu.be/89cGQjB5R4M?feature=shared).**\n\n### Check for Understanding\n\n**Question**: What is the purpose of the `return` statement in a function?\n\n* A) To stop the function\n* B) To send a value back to the caller\n* C) To print a message\n* D) To define a variable\n\n<details>\n\n<summary>View answer</summary>\n\n**Answer**: B) To send a value back to the caller.\n\n</details>\n\n**Question**: What will be the output of the following code?\n\n```python\ndef greet(name):\n    print(\"Hello, \" + name + \"!\")\n    \ngreet(\"Luis\")\n```\n\n* A) `\"Hello, stranger!\"`\n* B) `\"Hello, Luis!\"`\n* C) `\"Hello, name!\"`\n* D) `\"Luis\"`\n\n<details>\n\n<summary>View answer</summary>\n\n**Answer**: B) `\"Hello, Luis!\"`\n\n</details>\n\n## 1.7 Basic Debugging\n\n**Debugging** is the process of finding and fixing errors in your code. Two popular methods for basic debugging in Python are using **print statements** and **logging**.\n\n### Debugging with Print Statements\n\nPrint statements are a simple way to check the values of variables and understand the flow of your program. This technique helps you see what‚Äôs happening at specific points in your code.\n\n```python\ndef multiply(a, b):\n    result = a * b\n    print(\"Result is: \", result)  # Print to check the result\n    return result\n\nmultiply(3, 5)  # Output: Result is: 15\n```\n\nTips for effective print debugging:\n\n* Use descriptive messages (e.g., `\"Starting loop at i=\" + str(i)`).\n* Print variable values and descriptions of the program state.\n* Remember to remove or comment out `print` statements when you‚Äôre done!\n\n### Debugging with Logging\n\nThe **logging** module provides more control over output and is useful for larger projects or tracking complex issues. Unlike **print**, logging allows you to set levels to distinguish between informational messages, warnings, errors, and more.\n\nLogging Levels\n\n* **DEBUG**: Detailed information, typically useful only for debugging.\n* **INFO**: Confirmation that things are working as expected.\n* **WARNING**: An indication that something unexpected happened, or indicative of future problems.\n* **ERROR**: A serious problem that prevented some part of the code from running.\n\nTo use logging:\n\n1. Import the `logging` module.\n2. Set up basic configuration with `logging.basicConfig()`.\n3. Use logging statements like `logging.debug()`, `logging.info()`, `logging.warning()`, and `logging.error()`.\n\nHere's an example of using logging for debugging. Notice how each of the three steps are incorporated.\n\n```python\n# Step 1\nimport logging\n\n# Step 2\nlogging.basicConfig(level=logging.DEBUG)\n\n# Step 3\ndef multiply(a, b):\n    logging.debug(f\"Multiplying {a} and {b}\")\n    result = a * b\n    logging.info(f\"Result is: {result}\")\n    return result\n\nmultiply(3, 5)\n```\n\n### For Further Investigation: Using the Debugger\n\nVSCode with the Python plugin provides a debugger.  You can set breakpoints, step in or over function calls, display or change the values of variables, and so on.  You will need to learn to use a debugger eventually, although it is not required for this course.  If you want to check this out, see [this link](https://code.visualstudio.com/docs/python/python-quick-start#_debug) for a description, and [here](https://www.youtube.com/watch?v=b4p-SBjHh28) is a video that shows the process.\n\n### üé¨ Video 1.7: Basic Debugging\n\nLet's wrap up this section with a short video on debugging.\n\n**[View the video here!](https://youtu.be/R4pCjyknKD0?feature=shared)**\n\n### Check for Understanding\n\n**Question**: What is the primary purpose of using `print` statements in debugging?\n\n* A) To find and correct errors in variable values and program flow\n* B) To slow down the program\n* C) To remove errors automatically\n* D) To show only the final output\n\n<details>\n<summary>View answer</summary>\n\n**Answer**: A) To find and correct errors in variable values and program flow\n</details>\n---\n\n## 1.8 Error Handling\n\nError handling in Python is managed using the `try`, `except`, `else`, and `finally` blocks. This structure allows developers to gracefully handle errors that may occur during runtime, ensuring that the program can either recover from an issue or fail gracefully with useful feedback.\n\n### `try` and `except`\n\nThe `try` block contains code that might raise an error. If an error occurs, the `except` block is executed, and Python will not terminate the program abruptly. You can catch specific exceptions or handle all exceptions generally.\n\n```python\ntry:\n    result = 10 / 0\nexcept ZeroDivisionError:\n    print(\"Error: Division by zero is not allowed.\")\n```\n\n```python\ntry:\n    num = int(input(\"Enter a number: \"))\nexcept Exception as e:\n    print(f\"An error occurred: {e}\")\n```\n\n### `else`\n\nThe `else` block is optional and runs if no exception was raised in the try block.\n\n```python\ntry:\n    result = 10 / 2\nexcept ZeroDivisionError:\n    print(\"Error: Division by zero is not allowed.\")\nelse:\n    print(f\"Success! The result is {result}.\")\n```\n\n### `finally`\n\nThe `finally` block runs regardless of whether an exception occurred or not. It‚Äôs often used for cleanup actions like closing files or database connections.\n\n```python\ntry:\n    file = open(\"example.txt\", \"r\")\n    content = file.read()\nexcept FileNotFoundError:\n    print(\"Error: File not found.\")\nfinally:\n    file.close()\n    print(\"File closed.\")\n```\n\n### Raising exceptions\n\nPython allows you to raise exceptions using the raise keyword, either with built-in exceptions or custom ones.\n\n```python\ndef check_age(age):\n    if age < 18:\n        raise ValueError(\"Age must be 18 or older.\")\n    return True\n\ntry:\n    check_age(16)\nexcept ValueError as e:\n    print(e)\n```\n\n### üé¨ Video 1.8 Error Handling\n\nOur final video of Lesson 1 covers error handling with `try` and  `except` blocks.\n\n**[View the video here](https://youtu.be/NIWwJbo-9_8?feature=shared).**\n\n\n\n### Check for Understanding\n\n**Question**: If the following code tries to divide by zero, which message will it print?\n\n```python\ntry:\n    result = 10 / 0\nexcept ZeroDivisionError:\n    print(\"Error: Division by zero is not allowed.\")\n```\n\n* A) It will print nothing\n* B) `10`\n* C) `Error: Division by zero is not allowed.`\n* D) `None`\n\n<details>\n<summary>View answer</summary>\n\n**Answer:** C) `Error: Division by zero is not allowed.`\n</details>\n\n## 1.9 String Operations\n\nIn Python, everything is an object, and each object is an instance of a class.  Each class provides methods for the object.  Try the following.  Open a `.py` file in VSCode, and declare a string, like:\n```\nmy_string = \"abc\"\n```\nThen, on the next line, type `my_string.`.  As you type the dot, VSCode prompts you with a pulldown that has many methods for this instance of the `str` class, such as lower(), upper(), split(), join(), strip(), and so on.  You can check out the reference [here.](https://docs.python.org/3/library/string.html)\n\nYou can also use formatted strings.  These do variable substitution to compose a string.  Each of the values is converted to a string and added to the result.  Formatted strings have an `f` just before the first double quote, as follows:\n```\nname = \"Ed\"\ncount = 6\nkind_of_object = \"apples\"\nprint(f\"{name} has {count} {kind_of_object}.\") # Prints \"Ed has 6 apples.\"\n```\nYou can also add format indications, for example to show two decimal places:\n```\ncost = 22/7\nprint(f\"The pie cost ${cost:.2f}.\")\n```\n\n## üéâ Congratulations on finishing your first lesson in Python Essentials!\n\nYour next step is to complete the coding assignment. As always, reach out to your mentor if you have questions, and take time to celebrate your hard work. \n\n---\nThis content was written by Janet Zulu, Reid Russom, and CTD volunteers‚Äîwith special thanks to the brain trust of John McGarvey, Rebecca Callari-Kaczmarczyk, Tom Arns, and Josh Sternfeld. To submit feedback, please fill out the **[CTD Curriculum Feedback Form](https://forms.gle/RZq5mav7wotFxyie6)**.\n",
      "videoUrl": "",
      "codeExamples": [],
      "externalLinks": [],
      "quizzes": [],
      "_id": "68796c78a4ac7ef2a17a6171"
    }
  ]
}